# SPDX-FileCopyrightText: 2025 Contributors to the OpenSTEF project <short.term.energy.forecasts@alliander.com>
#
# SPDX-License-Identifier: MPL-2.0

[build-system]
build-backend = "hatchling.build"

requires = [ "hatchling" ]

[project]
name = "openstef"
version = "0.0.0"
description = "Open Short Term Energy forecasting library"
readme = "README.md"
keywords = [ "energy", "forecasting", "machinelearning" ]
license = "MPL-2.0"
authors = [
  { name = "Alliander N.V", email = "short.term.energy.forecasts@alliander.com" },
]
requires-python = ">=3.12,<4.0"
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]

dependencies = [
  "openstef-core",
  "openstef-models",
]

optional-dependencies.all = [
  "openstef-beam[boto]",
  "openstef-compatibility",
  "openstef-core",
  "openstef-models",
]
optional-dependencies.beam = [
  "openstef-beam",
]
optional-dependencies.compatibility = [
  "openstef-compatibility",
]
optional-dependencies.models = [
  "openstef-models",
]
urls.Documentation = "https://openstef.github.io/openstef/index.html"
urls.Homepage = "https://lfenergy.org/projects/openstef/"
urls.Issues = "https://github.com/OpenSTEF/openstef/issues"
urls.Repository = "https://github.com/OpenSTEF/openstef"

[dependency-groups]
dev = [
  "microsoft-python-type-stubs",
  "moto[s3,server]>=5.1.11",
  "openstef-beam",
  "openstef-core",
  "openstef-docs",
  "openstef-models",
  "pandas-stubs>=2.3.0.250703",
  "poethepoet>=0.36",
  "pyproject-fmt>=2.6",
  "pyright>=1.1.403",
  "pytest>=8.4.1",
  "pytest-cov>=6.2.1",
  "pytest-xdist>=3.8",
  "reuse>=5.0.2",
  "ruff>=0.12.8",
]

[tool.hatch.build.targets.wheel]
bypass-selection = true

[tool.ruff]
target-version = "py312"
line-length = 120
src = [
  "examples",
  "packages/*/src",
]

include = [
  "examples/**/*.py",
  "packages/**/*.py",
]
output-format = "concise"
format.preview = true
lint.select = [ "ALL" ]
lint.ignore = [
  "COM812", # Conflicting rules (a), ruff itself suggest disabling them.
  "CPY001", # Reuse covers copyright checks.
  "D203",   # Conflicting rules (a), ruff itself suggest disabling them.
  "D213",   # Conflicting rules (a), ruff itself suggest disabling them.
  "EM101",  # do not enforce message in variable when raising an exception.
  "TC006",  # Let's not force quoting the first param of typing.cast
  "TRY003", # simplify exception messages
]
lint.per-file-ignores."./docs/*" = [
  "T201", # tools are cli scripts and are allowed to use print
]
lint.per-file-ignores."./packages/*/tests/*" = [
  "ARG",     # Unused function args -> fixtures nevertheless are functionally relevant...
  "D",       # All docstring rules
  "DOC",     # All docstring rules
  "E501",    # Line too long (test names can be descriptive)
  "FBT",     # Allow booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
  "PLR0913", # Pytests can have a lot of fixtures, ignore too many arguments
  "PLR0917", # Pytests can have a lot of fixtures, ignore too many arguments
  "PLR2004", # Magic value used in comparison
  "S101",    # asserts allowed in tests...
  "S311",    # Standard pseudo-random generators
  "SLF001",  # Allow private access in tests
]
lint.per-file-ignores."./tools/*" = [
  "T201", # tools are cli scripts and are allowed to use print
]
lint.fixable = [ "ALL" ]
lint.flake8-annotations.allow-star-arg-any = true # *args and **kwargs are allowed to be Any
lint.flake8-annotations.suppress-dummy-args = true # do not type _ arguments/variables
lint.flake8-annotations.suppress-none-returning = true # do not require annotation if None is returned/there is no return
lint.isort.known-first-party = [
  "src",
  "tests",
  "examples",
] # Useful if ruff does not run from the actual root of the project and to import form tests
lint.pydocstyle.convention = "google"
lint.pylint.allow-dunder-method-names = [
  "__get_pydantic_core_schema__",
  "__pydantic_init_subclass__",
] # valid pydantic name
lint.pylint.max-args = 7 # the default of 5 is a bit limiting. 7 should be enough for nearly all cases
lint.preview = true

[tool.pyproject-fmt]
column_width = 120
indent = 2
max_supported_python = "3.13"

[tool.pytest.ini_options]
testpaths = [ "packages/*/tests", "tests" ]
python_files = [ "test_*.py", "*_test.py" ]
addopts = [
  "--import-mode=importlib", # modern way to import tests
  "--strict-markers",        # Force defining marks here (in a markers setting) to prevent typos
]
markers = [
  "integration: marks integration tests",
  "slow: marks slow-running tests",
]

[tool.coverage.report]
fail_under = 20
show_missing = true
skip_covered = true
sort = "-Miss"
omit = [ "tests/*" ]

[tool.coverage.run]
source = [
  "packages/openstef-beam/src",
  "packages/openstef-models/src",
  "packages/openstef-core/src",
  "packages/openstef-compatibility/src",
]
omit = [
  "tests/*",
  "examples/*",
  "packages/*/src/tests/*",
  "packages/*/src/examples/*",
]

[tool.pyright]
include = [
  "tools/**/*.py",
  "examples/**/*.py",
  "packages/*/src/**/*.py",
  "packages/*/examples/**/*.py",
]
typeCheckingMode = "strict"
reportPrivateImportUsage = false
reportMissingTypeStubs = false
reportPrivateUsage = false

[[tool.pyright.overrides]]
files = [ "packages/*/src/tests" ]
typeCheckingMode = "strict"

[tool.uv.sources]
openstef-beam = { workspace = true }
openstef-models = { workspace = true }
openstef-compatibility = { workspace = true }
openstef-docs = { workspace = true }
openstef-core = { workspace = true }
microsoft-python-type-stubs = { git = "git+https://github.com/microsoft/python-type-stubs.git" }

[tool.uv.workspace]
members = [
  "packages/openstef-models",
  "packages/openstef-beam",
  "packages/openstef-compatibility",
  "docs",
  "packages/openstef-core",
]

[tool.poe.tasks.lint]
help = "Lint code (with ruff)"
cmd = 'ruff check --fix --show-fixes ${check:+ --no-fix} ${unsafe:+ --unsafe-fixes}'
args = [
  { name = "check", type = "boolean", help = "Does not correct files, only warns" },
  { name = "unsafe", type = "boolean", help = "Enables unsafe fixes, which may change the code in a way that is not reversible. Use with care." },
]

[tool.poe.tasks.format]
help = "Format code (with ruff)"
cmd = 'ruff format ${check:+ --diff}'
args = [ { name = "check", type = "boolean", help = "Does not correct files, only warns" } ]

[tool.poe.tasks.format-pyproject]
help = "Format pyproject.toml (with pyproject-fmt)"
cmd = 'pyproject-fmt ${check:+ --check} -n pyproject.toml packages/*/pyproject.toml'
args = [ { name = "check", type = "boolean", help = "Does not correct files, only warns" } ]

[tool.poe.tasks.lock]
help = "Asserts that dependencies are locked"
cmd = "uv lock --check"

[tool.poe.tasks.type]
help = "Check typing (with pyright)"
cmd = "pyright"

[tool.poe.tasks.tests]
help = "Run pytest with xdist, marker filtering, and coverage"
cmd = "pytest --numprocesses=auto ${markers:+ -m $markers} --cov --cov-report=term-missing --cov-report=xml:coverage.xml"
args = [
  { name = "markers", type = "string", default = "", help = "Only run tests matching the given pytest markers expression" },
]

[tool.poe.tasks.doctests]
help = "Run all docstring examples via pytestâ€™s doctest plugin"
cmd = "pytest --numprocesses=auto --doctest-modules packages/*/src --maxfail=1 --disable-warnings"

[tool.poe.tasks.report]
help = "Generate coverage report. Will use data from a previous cover command."
sequence = [
  { cmd = "coverage report", help = "Generate a coverage report" },
  { cmd = "coverage xml -o coverage.xml", help = "Generate XML coverage report for CI integration" },
]

[tool.poe.tasks.reuse]
help = "Check REUSE compliance (with optional fix)"
args = [ { name = "fix", type = "boolean", help = "Automatically fix REUSE compliance issues before lint check" } ]
control.expr = "fix"
switch = [
  { case = "True", cmd = "uv run tools/reuse-fix.py --license \"MPL-2.0\" --copyright \"Contributors to the OpenSTEF project <short.term.energy.forecasts@alliander.com>\"" },
  { cmd = "reuse lint" },
]

[tool.poe.tasks.all]
help = "Run all CI calls"
control.expr = "check"                                                                       # There is no pass through option (yet?) so use a control expression to pass --check option to tasks when relevant
args = [ { name = "check", type = "boolean", help = "Does not correct files, only warns" } ]
# NB: ruff needs the linter (which will sort imports) to run before the formatter (which cannot sort imports).
switch = [
  { case = "check", sequence = [
    "reuse",
    "lint --check",
    "format --check",
    "format-pyproject --check",
    "lock",
    "type",
    "tests",
    "doctests",
  ], ignore_fail = "return_non_zero" },
  { sequence = [
    "reuse --fix",
    "lint",
    "format",
    "format-pyproject",
    "lock",
    "type",
    "tests",
    "doctests",
  ], ignore_fail = "return_non_zero" },
]

[tool.poe.tasks.version]
help = "Set the release version in pyproject.toml and packages' pyproject.toml files"
sequence = [
  # Bumps the version in all pyproject.toml files
  { cmd = "uv version ${version} --frozen" },
  { cmd = "uv version --package openstef-beam ${version} --frozen" },
  { cmd = "uv version --package openstef-models ${version} --frozen" },
  { cmd = "uv version --package openstef-core ${version} --frozen" },
  # Pin these versions in the root pyproject.toml
  { cmd = "uv add openstef-beam==${version} --optional beam" },
  { cmd = "uv add openstef-models==${version} --optional models" },
  { cmd = "uv add openstef-core==${version} --optional core" },
  { cmd = "uv add openstef-models==${version} openstef-beam==${version} openstef-core==${version} --optional all" },
  { cmd = "uv add openstef-models==${version} openstef-core==${version}" },
]
args = [
  { name = "version", type = "string", help = "The version to set, e.g. 4.0.0" },
]

[tool.poe.tasks.build]
help = "Build all packages"
sequence = [
  { cmd = "uv build --all-packages" },
  { cmd = "uv build .", help = "Build root meta package separately (not part of --all-packages)" },
]

[tool.poe.tasks.docs]
help = "Build the documentation"
control.expr = "serve"
switch = [
  { case = "True", cmd = "sphinx-autobuild docs/source docs/build/html --watch packages" },
  { cmd = "sphinx-build -b html docs/source docs/build/html" },
]
args = [
  { name = "serve", type = "boolean", default = false, help = "Serve the documentation with live reload" },
]

[tool.poe.tasks.docs-clean]
help = "Clean the documentation build artifacts"
cmd = "rm -rf docs/build/html/* docs/source/api/generated"
